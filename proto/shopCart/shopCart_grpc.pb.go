// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: shopCart.proto

package shopCart

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ShopCartSrv_AddShopCart_FullMethodName      = "/proto.ShopCartSrv/AddShopCart"
	ShopCartSrv_ShopCartList_FullMethodName     = "/proto.ShopCartSrv/ShopCartList"
	ShopCartSrv_UpdateShopCart_FullMethodName   = "/proto.ShopCartSrv/UpdateShopCart"
	ShopCartSrv_ShopCartCheckout_FullMethodName = "/proto.ShopCartSrv/ShopCartCheckout"
)

// ShopCartSrvClient is the client API for ShopCartSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopCartSrvClient interface {
	AddShopCart(ctx context.Context, in *AddShopCartRequest, opts ...grpc.CallOption) (*AddShopCartResponse, error)
	ShopCartList(ctx context.Context, in *ShopCartListRequest, opts ...grpc.CallOption) (*ShopCartListResponse, error)
	UpdateShopCart(ctx context.Context, in *UpdateShopCartRequest, opts ...grpc.CallOption) (*UpdateShopCartResponse, error)
	ShopCartCheckout(ctx context.Context, in *ShopCartCheckoutRequest, opts ...grpc.CallOption) (*ShopCartCheckoutResponse, error)
}

type shopCartSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewShopCartSrvClient(cc grpc.ClientConnInterface) ShopCartSrvClient {
	return &shopCartSrvClient{cc}
}

func (c *shopCartSrvClient) AddShopCart(ctx context.Context, in *AddShopCartRequest, opts ...grpc.CallOption) (*AddShopCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddShopCartResponse)
	err := c.cc.Invoke(ctx, ShopCartSrv_AddShopCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopCartSrvClient) ShopCartList(ctx context.Context, in *ShopCartListRequest, opts ...grpc.CallOption) (*ShopCartListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShopCartListResponse)
	err := c.cc.Invoke(ctx, ShopCartSrv_ShopCartList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopCartSrvClient) UpdateShopCart(ctx context.Context, in *UpdateShopCartRequest, opts ...grpc.CallOption) (*UpdateShopCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateShopCartResponse)
	err := c.cc.Invoke(ctx, ShopCartSrv_UpdateShopCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopCartSrvClient) ShopCartCheckout(ctx context.Context, in *ShopCartCheckoutRequest, opts ...grpc.CallOption) (*ShopCartCheckoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShopCartCheckoutResponse)
	err := c.cc.Invoke(ctx, ShopCartSrv_ShopCartCheckout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopCartSrvServer is the server API for ShopCartSrv service.
// All implementations must embed UnimplementedShopCartSrvServer
// for forward compatibility
type ShopCartSrvServer interface {
	AddShopCart(context.Context, *AddShopCartRequest) (*AddShopCartResponse, error)
	ShopCartList(context.Context, *ShopCartListRequest) (*ShopCartListResponse, error)
	UpdateShopCart(context.Context, *UpdateShopCartRequest) (*UpdateShopCartResponse, error)
	ShopCartCheckout(context.Context, *ShopCartCheckoutRequest) (*ShopCartCheckoutResponse, error)
	mustEmbedUnimplementedShopCartSrvServer()
}

// UnimplementedShopCartSrvServer must be embedded to have forward compatible implementations.
type UnimplementedShopCartSrvServer struct {
}

func (UnimplementedShopCartSrvServer) AddShopCart(context.Context, *AddShopCartRequest) (*AddShopCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShopCart not implemented")
}
func (UnimplementedShopCartSrvServer) ShopCartList(context.Context, *ShopCartListRequest) (*ShopCartListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopCartList not implemented")
}
func (UnimplementedShopCartSrvServer) UpdateShopCart(context.Context, *UpdateShopCartRequest) (*UpdateShopCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShopCart not implemented")
}
func (UnimplementedShopCartSrvServer) ShopCartCheckout(context.Context, *ShopCartCheckoutRequest) (*ShopCartCheckoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopCartCheckout not implemented")
}
func (UnimplementedShopCartSrvServer) mustEmbedUnimplementedShopCartSrvServer() {}

// UnsafeShopCartSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopCartSrvServer will
// result in compilation errors.
type UnsafeShopCartSrvServer interface {
	mustEmbedUnimplementedShopCartSrvServer()
}

func RegisterShopCartSrvServer(s grpc.ServiceRegistrar, srv ShopCartSrvServer) {
	s.RegisterService(&ShopCartSrv_ServiceDesc, srv)
}

func _ShopCartSrv_AddShopCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddShopCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopCartSrvServer).AddShopCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopCartSrv_AddShopCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopCartSrvServer).AddShopCart(ctx, req.(*AddShopCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopCartSrv_ShopCartList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopCartListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopCartSrvServer).ShopCartList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopCartSrv_ShopCartList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopCartSrvServer).ShopCartList(ctx, req.(*ShopCartListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopCartSrv_UpdateShopCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShopCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopCartSrvServer).UpdateShopCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopCartSrv_UpdateShopCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopCartSrvServer).UpdateShopCart(ctx, req.(*UpdateShopCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopCartSrv_ShopCartCheckout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopCartCheckoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopCartSrvServer).ShopCartCheckout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopCartSrv_ShopCartCheckout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopCartSrvServer).ShopCartCheckout(ctx, req.(*ShopCartCheckoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopCartSrv_ServiceDesc is the grpc.ServiceDesc for ShopCartSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopCartSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ShopCartSrv",
	HandlerType: (*ShopCartSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddShopCart",
			Handler:    _ShopCartSrv_AddShopCart_Handler,
		},
		{
			MethodName: "ShopCartList",
			Handler:    _ShopCartSrv_ShopCartList_Handler,
		},
		{
			MethodName: "UpdateShopCart",
			Handler:    _ShopCartSrv_UpdateShopCart_Handler,
		},
		{
			MethodName: "ShopCartCheckout",
			Handler:    _ShopCartSrv_ShopCartCheckout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shopCart.proto",
}
