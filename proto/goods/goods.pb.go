// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v3.19.4
// source: goods.proto

package goods

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProductListReq_SortBy int32

const (
	ProductListReq_DEFAULT    ProductListReq_SortBy = 0
	ProductListReq_PRICE_ASC  ProductListReq_SortBy = 1
	ProductListReq_PRICE_DESC ProductListReq_SortBy = 2
	ProductListReq_SALES_DESC ProductListReq_SortBy = 3
	ProductListReq_NEWEST     ProductListReq_SortBy = 4
)

// Enum value maps for ProductListReq_SortBy.
var (
	ProductListReq_SortBy_name = map[int32]string{
		0: "DEFAULT",
		1: "PRICE_ASC",
		2: "PRICE_DESC",
		3: "SALES_DESC",
		4: "NEWEST",
	}
	ProductListReq_SortBy_value = map[string]int32{
		"DEFAULT":    0,
		"PRICE_ASC":  1,
		"PRICE_DESC": 2,
		"SALES_DESC": 3,
		"NEWEST":     4,
	}
)

func (x ProductListReq_SortBy) Enum() *ProductListReq_SortBy {
	p := new(ProductListReq_SortBy)
	*p = x
	return p
}

func (x ProductListReq_SortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductListReq_SortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_goods_proto_enumTypes[0].Descriptor()
}

func (ProductListReq_SortBy) Type() protoreflect.EnumType {
	return &file_goods_proto_enumTypes[0]
}

func (x ProductListReq_SortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductListReq_SortBy.Descriptor instead.
func (ProductListReq_SortBy) EnumDescriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{2, 0}
}

// 商品添加
type ProductReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                     // 商品名称
	CategoryId    uint32                 `protobuf:"varint,2,opt,name=CategoryId,proto3" json:"CategoryId,omitempty"`        // 所属分类ID
	Description   string                 `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`       // 商品描述
	Price         float64                `protobuf:"fixed64,4,opt,name=Price,proto3" json:"Price,omitempty"`                 // 售价
	OriginalPrice float64                `protobuf:"fixed64,5,opt,name=OriginalPrice,proto3" json:"OriginalPrice,omitempty"` // 原价
	CostPrice     float64                `protobuf:"fixed64,6,opt,name=CostPrice,proto3" json:"CostPrice,omitempty"`         // 成本价
	Stock         int32                  `protobuf:"varint,7,opt,name=Stock,proto3" json:"Stock,omitempty"`                  // 库存
	MainImage     string                 `protobuf:"bytes,8,opt,name=MainImage,proto3" json:"MainImage,omitempty"`           // 主图URL
	IsOnSale      bool                   `protobuf:"varint,9,opt,name=IsOnSale,proto3" json:"IsOnSale,omitempty"`            // 是否上架
	IsHot         bool                   `protobuf:"varint,10,opt,name=IsHot,proto3" json:"IsHot,omitempty"`                 // 是否热销
	IsRecommend   bool                   `protobuf:"varint,11,opt,name=IsRecommend,proto3" json:"IsRecommend,omitempty"`     // 是否推荐
	Images        []*ProductImage        `protobuf:"bytes,12,rep,name=Images,proto3" json:"Images,omitempty"`                // 商品图片列表
	Attributes    []*ProductAttribute    `protobuf:"bytes,13,rep,name=Attributes,proto3" json:"Attributes,omitempty"`        // 商品属性
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductReq) Reset() {
	*x = ProductReq{}
	mi := &file_goods_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductReq) ProtoMessage() {}

func (x *ProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductReq.ProtoReflect.Descriptor instead.
func (*ProductReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{0}
}

func (x *ProductReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductReq) GetCategoryId() uint32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *ProductReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProductReq) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ProductReq) GetOriginalPrice() float64 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *ProductReq) GetCostPrice() float64 {
	if x != nil {
		return x.CostPrice
	}
	return 0
}

func (x *ProductReq) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *ProductReq) GetMainImage() string {
	if x != nil {
		return x.MainImage
	}
	return ""
}

func (x *ProductReq) GetIsOnSale() bool {
	if x != nil {
		return x.IsOnSale
	}
	return false
}

func (x *ProductReq) GetIsHot() bool {
	if x != nil {
		return x.IsHot
	}
	return false
}

func (x *ProductReq) GetIsRecommend() bool {
	if x != nil {
		return x.IsRecommend
	}
	return false
}

func (x *ProductReq) GetImages() []*ProductImage {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ProductReq) GetAttributes() []*ProductAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ProductResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Id            uint32                 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"` // 创建的商品ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductResp) Reset() {
	*x = ProductResp{}
	mi := &file_goods_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductResp) ProtoMessage() {}

func (x *ProductResp) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductResp.ProtoReflect.Descriptor instead.
func (*ProductResp) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{1}
}

func (x *ProductResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ProductResp) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 商品列表
type ProductListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CategoryId    uint32                 `protobuf:"varint,1,opt,name=CategoryId,proto3" json:"CategoryId,omitempty"`                      // 可选，按分类筛选
	Keyword       string                 `protobuf:"bytes,2,opt,name=Keyword,proto3" json:"Keyword,omitempty"`                             // 可选，按关键词搜索
	Page          int32                  `protobuf:"varint,3,opt,name=Page,proto3" json:"Page,omitempty"`                                  // 页码
	PageSize      int32                  `protobuf:"varint,4,opt,name=PageSize,proto3" json:"PageSize,omitempty"`                          // 每页数量
	Sort          ProductListReq_SortBy  `protobuf:"varint,5,opt,name=Sort,proto3,enum=proto.ProductListReq_SortBy" json:"Sort,omitempty"` // 排序方式
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductListReq) Reset() {
	*x = ProductListReq{}
	mi := &file_goods_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductListReq) ProtoMessage() {}

func (x *ProductListReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductListReq.ProtoReflect.Descriptor instead.
func (*ProductListReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{2}
}

func (x *ProductListReq) GetCategoryId() uint32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *ProductListReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ProductListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ProductListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ProductListReq) GetSort() ProductListReq_SortBy {
	if x != nil {
		return x.Sort
	}
	return ProductListReq_DEFAULT
}

type ProductListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*ProductItem         `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
	Total         int32                  `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"` // 总数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductListResp) Reset() {
	*x = ProductListResp{}
	mi := &file_goods_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductListResp) ProtoMessage() {}

func (x *ProductListResp) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductListResp.ProtoReflect.Descriptor instead.
func (*ProductListResp) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{3}
}

func (x *ProductListResp) GetList() []*ProductItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ProductListResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 商品品牌
type GoodsBrandsListPidReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pid           int64                  `protobuf:"varint,1,opt,name=Pid,proto3" json:"Pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GoodsBrandsListPidReq) Reset() {
	*x = GoodsBrandsListPidReq{}
	mi := &file_goods_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoodsBrandsListPidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsBrandsListPidReq) ProtoMessage() {}

func (x *GoodsBrandsListPidReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsBrandsListPidReq.ProtoReflect.Descriptor instead.
func (*GoodsBrandsListPidReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{4}
}

func (x *GoodsBrandsListPidReq) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type GoodsBrandsListPidResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*GoodsBrandsListPid  `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GoodsBrandsListPidResp) Reset() {
	*x = GoodsBrandsListPidResp{}
	mi := &file_goods_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoodsBrandsListPidResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsBrandsListPidResp) ProtoMessage() {}

func (x *GoodsBrandsListPidResp) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsBrandsListPidResp.ProtoReflect.Descriptor instead.
func (*GoodsBrandsListPidResp) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{5}
}

func (x *GoodsBrandsListPidResp) GetList() []*GoodsBrandsListPid {
	if x != nil {
		return x.List
	}
	return nil
}

type GoodsBrandsListPid struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	BrandName        string                 `protobuf:"bytes,1,opt,name=BrandName,proto3" json:"BrandName,omitempty"`               // 品牌名称
	BrandFirstLetter string                 `protobuf:"bytes,2,opt,name=BrandFirstLetter,proto3" json:"BrandFirstLetter,omitempty"` // 品牌首字母
	BrandImage       string                 `protobuf:"bytes,3,opt,name=BrandImage,proto3" json:"BrandImage,omitempty"`             // 品牌图片，存储图片路径等信息
	BrandSort        int64                  `protobuf:"varint,4,opt,name=BrandSort,proto3" json:"BrandSort,omitempty"`              // 品牌排序
	DisplayStatus    int64                  `protobuf:"varint,5,opt,name=DisplayStatus,proto3" json:"DisplayStatus,omitempty"`      // 显示状态，1表示显示，0表示不显示
	BrandDescription string                 `protobuf:"bytes,6,opt,name=BrandDescription,proto3" json:"BrandDescription,omitempty"` // 品牌描述
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GoodsBrandsListPid) Reset() {
	*x = GoodsBrandsListPid{}
	mi := &file_goods_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoodsBrandsListPid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsBrandsListPid) ProtoMessage() {}

func (x *GoodsBrandsListPid) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsBrandsListPid.ProtoReflect.Descriptor instead.
func (*GoodsBrandsListPid) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{6}
}

func (x *GoodsBrandsListPid) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *GoodsBrandsListPid) GetBrandFirstLetter() string {
	if x != nil {
		return x.BrandFirstLetter
	}
	return ""
}

func (x *GoodsBrandsListPid) GetBrandImage() string {
	if x != nil {
		return x.BrandImage
	}
	return ""
}

func (x *GoodsBrandsListPid) GetBrandSort() int64 {
	if x != nil {
		return x.BrandSort
	}
	return 0
}

func (x *GoodsBrandsListPid) GetDisplayStatus() int64 {
	if x != nil {
		return x.DisplayStatus
	}
	return 0
}

func (x *GoodsBrandsListPid) GetBrandDescription() string {
	if x != nil {
		return x.BrandDescription
	}
	return ""
}

type GoodsBrandsListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pid           int64                  `protobuf:"varint,1,opt,name=Pid,proto3" json:"Pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GoodsBrandsListReq) Reset() {
	*x = GoodsBrandsListReq{}
	mi := &file_goods_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoodsBrandsListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsBrandsListReq) ProtoMessage() {}

func (x *GoodsBrandsListReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsBrandsListReq.ProtoReflect.Descriptor instead.
func (*GoodsBrandsListReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{7}
}

func (x *GoodsBrandsListReq) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type GoodsBrandsListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*GoodsBrandsList     `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GoodsBrandsListResp) Reset() {
	*x = GoodsBrandsListResp{}
	mi := &file_goods_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoodsBrandsListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsBrandsListResp) ProtoMessage() {}

func (x *GoodsBrandsListResp) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsBrandsListResp.ProtoReflect.Descriptor instead.
func (*GoodsBrandsListResp) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{8}
}

func (x *GoodsBrandsListResp) GetList() []*GoodsBrandsList {
	if x != nil {
		return x.List
	}
	return nil
}

type GoodsBrandsList struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	BrandName        string                 `protobuf:"bytes,1,opt,name=BrandName,proto3" json:"BrandName,omitempty"`               // 品牌名称
	BrandFirstLetter string                 `protobuf:"bytes,2,opt,name=BrandFirstLetter,proto3" json:"BrandFirstLetter,omitempty"` // 品牌首字母
	BrandImage       string                 `protobuf:"bytes,3,opt,name=BrandImage,proto3" json:"BrandImage,omitempty"`             // 品牌图片，存储图片路径等信息
	BrandSort        int64                  `protobuf:"varint,4,opt,name=BrandSort,proto3" json:"BrandSort,omitempty"`              // 品牌排序
	DisplayStatus    int64                  `protobuf:"varint,5,opt,name=DisplayStatus,proto3" json:"DisplayStatus,omitempty"`      // 显示状态，1表示显示，0表示不显示
	BrandDescription string                 `protobuf:"bytes,6,opt,name=BrandDescription,proto3" json:"BrandDescription,omitempty"` // 品牌描述
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GoodsBrandsList) Reset() {
	*x = GoodsBrandsList{}
	mi := &file_goods_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoodsBrandsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsBrandsList) ProtoMessage() {}

func (x *GoodsBrandsList) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsBrandsList.ProtoReflect.Descriptor instead.
func (*GoodsBrandsList) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{9}
}

func (x *GoodsBrandsList) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *GoodsBrandsList) GetBrandFirstLetter() string {
	if x != nil {
		return x.BrandFirstLetter
	}
	return ""
}

func (x *GoodsBrandsList) GetBrandImage() string {
	if x != nil {
		return x.BrandImage
	}
	return ""
}

func (x *GoodsBrandsList) GetBrandSort() int64 {
	if x != nil {
		return x.BrandSort
	}
	return 0
}

func (x *GoodsBrandsList) GetDisplayStatus() int64 {
	if x != nil {
		return x.DisplayStatus
	}
	return 0
}

func (x *GoodsBrandsList) GetBrandDescription() string {
	if x != nil {
		return x.BrandDescription
	}
	return ""
}

type GoodsBrandsAddReq struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	BrandName        string                 `protobuf:"bytes,1,opt,name=BrandName,proto3" json:"BrandName,omitempty"`               // 品牌名称
	BrandFirstLetter string                 `protobuf:"bytes,2,opt,name=BrandFirstLetter,proto3" json:"BrandFirstLetter,omitempty"` // 品牌首字母
	BrandImage       string                 `protobuf:"bytes,3,opt,name=BrandImage,proto3" json:"BrandImage,omitempty"`             // 品牌图片，存储图片路径等信息
	BrandSort        int64                  `protobuf:"varint,4,opt,name=BrandSort,proto3" json:"BrandSort,omitempty"`              // 品牌排序
	DisplayStatus    int64                  `protobuf:"varint,5,opt,name=DisplayStatus,proto3" json:"DisplayStatus,omitempty"`      // 显示状态，1表示显示，0表示不显示
	BrandDescription string                 `protobuf:"bytes,6,opt,name=BrandDescription,proto3" json:"BrandDescription,omitempty"` // 品牌描述
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GoodsBrandsAddReq) Reset() {
	*x = GoodsBrandsAddReq{}
	mi := &file_goods_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoodsBrandsAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsBrandsAddReq) ProtoMessage() {}

func (x *GoodsBrandsAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsBrandsAddReq.ProtoReflect.Descriptor instead.
func (*GoodsBrandsAddReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{10}
}

func (x *GoodsBrandsAddReq) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *GoodsBrandsAddReq) GetBrandFirstLetter() string {
	if x != nil {
		return x.BrandFirstLetter
	}
	return ""
}

func (x *GoodsBrandsAddReq) GetBrandImage() string {
	if x != nil {
		return x.BrandImage
	}
	return ""
}

func (x *GoodsBrandsAddReq) GetBrandSort() int64 {
	if x != nil {
		return x.BrandSort
	}
	return 0
}

func (x *GoodsBrandsAddReq) GetDisplayStatus() int64 {
	if x != nil {
		return x.DisplayStatus
	}
	return 0
}

func (x *GoodsBrandsAddReq) GetBrandDescription() string {
	if x != nil {
		return x.BrandDescription
	}
	return ""
}

type GoodsBrandsAddResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GoodBrand     int64                  `protobuf:"varint,1,opt,name=GoodBrand,proto3" json:"GoodBrand,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GoodsBrandsAddResp) Reset() {
	*x = GoodsBrandsAddResp{}
	mi := &file_goods_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoodsBrandsAddResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsBrandsAddResp) ProtoMessage() {}

func (x *GoodsBrandsAddResp) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsBrandsAddResp.ProtoReflect.Descriptor instead.
func (*GoodsBrandsAddResp) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{11}
}

func (x *GoodsBrandsAddResp) GetGoodBrand() int64 {
	if x != nil {
		return x.GoodBrand
	}
	return 0
}

type ProductItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	CategoryId    uint32                 `protobuf:"varint,3,opt,name=CategoryId,proto3" json:"CategoryId,omitempty"`
	CategoryName  string                 `protobuf:"bytes,4,opt,name=CategoryName,proto3" json:"CategoryName,omitempty"` // 分类名称
	Price         float64                `protobuf:"fixed64,5,opt,name=Price,proto3" json:"Price,omitempty"`
	OriginalPrice float64                `protobuf:"fixed64,6,opt,name=OriginalPrice,proto3" json:"OriginalPrice,omitempty"`
	Stock         int32                  `protobuf:"varint,7,opt,name=Stock,proto3" json:"Stock,omitempty"`
	Sales         int32                  `protobuf:"varint,8,opt,name=Sales,proto3" json:"Sales,omitempty"`
	MainImage     string                 `protobuf:"bytes,9,opt,name=MainImage,proto3" json:"MainImage,omitempty"`
	IsOnSale      bool                   `protobuf:"varint,10,opt,name=IsOnSale,proto3" json:"IsOnSale,omitempty"`
	IsHot         bool                   `protobuf:"varint,11,opt,name=IsHot,proto3" json:"IsHot,omitempty"`
	IsRecommend   bool                   `protobuf:"varint,12,opt,name=IsRecommend,proto3" json:"IsRecommend,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductItem) Reset() {
	*x = ProductItem{}
	mi := &file_goods_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductItem) ProtoMessage() {}

func (x *ProductItem) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductItem.ProtoReflect.Descriptor instead.
func (*ProductItem) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{12}
}

func (x *ProductItem) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductItem) GetCategoryId() uint32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *ProductItem) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *ProductItem) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ProductItem) GetOriginalPrice() float64 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *ProductItem) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *ProductItem) GetSales() int32 {
	if x != nil {
		return x.Sales
	}
	return 0
}

func (x *ProductItem) GetMainImage() string {
	if x != nil {
		return x.MainImage
	}
	return ""
}

func (x *ProductItem) GetIsOnSale() bool {
	if x != nil {
		return x.IsOnSale
	}
	return false
}

func (x *ProductItem) GetIsHot() bool {
	if x != nil {
		return x.IsHot
	}
	return false
}

func (x *ProductItem) GetIsRecommend() bool {
	if x != nil {
		return x.IsRecommend
	}
	return false
}

type ProductImage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=Url,proto3" json:"Url,omitempty"`
	Sort          int32                  `protobuf:"varint,2,opt,name=Sort,proto3" json:"Sort,omitempty"` // 排序权重
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductImage) Reset() {
	*x = ProductImage{}
	mi := &file_goods_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductImage) ProtoMessage() {}

func (x *ProductImage) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductImage.ProtoReflect.Descriptor instead.
func (*ProductImage) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{13}
}

func (x *ProductImage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ProductImage) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

type ProductAttribute struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`   // 属性名(如"颜色")
	Value         string                 `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"` // 属性值(如"红色")
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductAttribute) Reset() {
	*x = ProductAttribute{}
	mi := &file_goods_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAttribute) ProtoMessage() {}

func (x *ProductAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAttribute.ProtoReflect.Descriptor instead.
func (*ProductAttribute) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{14}
}

func (x *ProductAttribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductAttribute) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// 商品栏目
type ProductColumnReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                       // 栏目名称
	Code          string                 `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`                       // 栏目代码(英文标识)
	SortOrder     int32                  `protobuf:"varint,3,opt,name=SortOrder,proto3" json:"SortOrder,omitempty"`            // 排序权重
	IsActive      bool                   `protobuf:"varint,4,opt,name=IsActive,proto3" json:"IsActive,omitempty"`              // 是否启用
	CategoryIds   []uint32               `protobuf:"varint,5,rep,packed,name=CategoryIds,proto3" json:"CategoryIds,omitempty"` // 关联的分类ID列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductColumnReq) Reset() {
	*x = ProductColumnReq{}
	mi := &file_goods_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductColumnReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductColumnReq) ProtoMessage() {}

func (x *ProductColumnReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductColumnReq.ProtoReflect.Descriptor instead.
func (*ProductColumnReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{15}
}

func (x *ProductColumnReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductColumnReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ProductColumnReq) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *ProductColumnReq) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *ProductColumnReq) GetCategoryIds() []uint32 {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

type ProductColumnResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Id            uint32                 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"` // 创建的栏目ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductColumnResp) Reset() {
	*x = ProductColumnResp{}
	mi := &file_goods_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductColumnResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductColumnResp) ProtoMessage() {}

func (x *ProductColumnResp) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductColumnResp.ProtoReflect.Descriptor instead.
func (*ProductColumnResp) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{16}
}

func (x *ProductColumnResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ProductColumnResp) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ProductColumnListReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	WithCategories bool                   `protobuf:"varint,1,opt,name=WithCategories,proto3" json:"WithCategories,omitempty"` // 是否包含关联分类
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ProductColumnListReq) Reset() {
	*x = ProductColumnListReq{}
	mi := &file_goods_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductColumnListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductColumnListReq) ProtoMessage() {}

func (x *ProductColumnListReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductColumnListReq.ProtoReflect.Descriptor instead.
func (*ProductColumnListReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{17}
}

func (x *ProductColumnListReq) GetWithCategories() bool {
	if x != nil {
		return x.WithCategories
	}
	return false
}

type ProductColumnListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*ProductColumnItem   `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductColumnListResp) Reset() {
	*x = ProductColumnListResp{}
	mi := &file_goods_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductColumnListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductColumnListResp) ProtoMessage() {}

func (x *ProductColumnListResp) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductColumnListResp.ProtoReflect.Descriptor instead.
func (*ProductColumnListResp) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{18}
}

func (x *ProductColumnListResp) GetList() []*ProductColumnItem {
	if x != nil {
		return x.List
	}
	return nil
}

type ProductColumnItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Code          string                 `protobuf:"bytes,3,opt,name=Code,proto3" json:"Code,omitempty"`
	SortOrder     int32                  `protobuf:"varint,4,opt,name=SortOrder,proto3" json:"SortOrder,omitempty"`
	IsActive      bool                   `protobuf:"varint,5,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
	Categories    []*ProductCategoryItem `protobuf:"bytes,6,rep,name=Categories,proto3" json:"Categories,omitempty"` // 关联的分类
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductColumnItem) Reset() {
	*x = ProductColumnItem{}
	mi := &file_goods_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductColumnItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductColumnItem) ProtoMessage() {}

func (x *ProductColumnItem) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductColumnItem.ProtoReflect.Descriptor instead.
func (*ProductColumnItem) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{19}
}

func (x *ProductColumnItem) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductColumnItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductColumnItem) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ProductColumnItem) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *ProductColumnItem) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *ProductColumnItem) GetCategories() []*ProductCategoryItem {
	if x != nil {
		return x.Categories
	}
	return nil
}

type ColumnProductReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ColumnId      uint32                 `protobuf:"varint,1,opt,name=ColumnId,proto3" json:"ColumnId,omitempty"` // 栏目ID
	Limit         int32                  `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`       // 获取数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColumnProductReq) Reset() {
	*x = ColumnProductReq{}
	mi := &file_goods_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnProductReq) ProtoMessage() {}

func (x *ColumnProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnProductReq.ProtoReflect.Descriptor instead.
func (*ColumnProductReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{20}
}

func (x *ColumnProductReq) GetColumnId() uint32 {
	if x != nil {
		return x.ColumnId
	}
	return 0
}

func (x *ColumnProductReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ColumnProductResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Products      []*ProductItem         `protobuf:"bytes,1,rep,name=Products,proto3" json:"Products,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColumnProductResp) Reset() {
	*x = ColumnProductResp{}
	mi := &file_goods_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnProductResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnProductResp) ProtoMessage() {}

func (x *ColumnProductResp) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnProductResp.ProtoReflect.Descriptor instead.
func (*ColumnProductResp) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{21}
}

func (x *ColumnProductResp) GetProducts() []*ProductItem {
	if x != nil {
		return x.Products
	}
	return nil
}

// 商品轮播图
type GoodsCarouselReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`       //TODO 	轮播图标题
	ImageUrl      string                 `protobuf:"bytes,2,opt,name=ImageUrl,proto3" json:"ImageUrl,omitempty"` //TODO 图片URL地址
	LinkUrl       string                 `protobuf:"bytes,3,opt,name=LinkUrl,proto3" json:"LinkUrl,omitempty"`   //TODO 	点击跳转链接
	GoodId        int64                  `protobuf:"varint,4,opt,name=GoodId,proto3" json:"GoodId,omitempty"`    //TODO 关联商品ID
	Sort          int64                  `protobuf:"varint,5,opt,name=Sort,proto3" json:"Sort,omitempty"`        //TODO 排序权重(越大越靠前)
	Active        int64                  `protobuf:"varint,6,opt,name=Active,proto3" json:"Active,omitempty"`    //TODO 是否启用
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GoodsCarouselReq) Reset() {
	*x = GoodsCarouselReq{}
	mi := &file_goods_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoodsCarouselReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsCarouselReq) ProtoMessage() {}

func (x *GoodsCarouselReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsCarouselReq.ProtoReflect.Descriptor instead.
func (*GoodsCarouselReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{22}
}

func (x *GoodsCarouselReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GoodsCarouselReq) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *GoodsCarouselReq) GetLinkUrl() string {
	if x != nil {
		return x.LinkUrl
	}
	return ""
}

func (x *GoodsCarouselReq) GetGoodId() int64 {
	if x != nil {
		return x.GoodId
	}
	return 0
}

func (x *GoodsCarouselReq) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *GoodsCarouselReq) GetActive() int64 {
	if x != nil {
		return x.Active
	}
	return 0
}

type GoodsCarouselResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GoodsCarouselResp) Reset() {
	*x = GoodsCarouselResp{}
	mi := &file_goods_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoodsCarouselResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsCarouselResp) ProtoMessage() {}

func (x *GoodsCarouselResp) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsCarouselResp.ProtoReflect.Descriptor instead.
func (*GoodsCarouselResp) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{23}
}

func (x *GoodsCarouselResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// 轮播图列表
type GoodsCarouselListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GoodsCarouselListReq) Reset() {
	*x = GoodsCarouselListReq{}
	mi := &file_goods_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoodsCarouselListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsCarouselListReq) ProtoMessage() {}

func (x *GoodsCarouselListReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsCarouselListReq.ProtoReflect.Descriptor instead.
func (*GoodsCarouselListReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{24}
}

type GoodsCarouselListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*GoodsCarouselList   `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GoodsCarouselListResp) Reset() {
	*x = GoodsCarouselListResp{}
	mi := &file_goods_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoodsCarouselListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsCarouselListResp) ProtoMessage() {}

func (x *GoodsCarouselListResp) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsCarouselListResp.ProtoReflect.Descriptor instead.
func (*GoodsCarouselListResp) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{25}
}

func (x *GoodsCarouselListResp) GetList() []*GoodsCarouselList {
	if x != nil {
		return x.List
	}
	return nil
}

type GoodsCarouselList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`       //TODO 	轮播图标题
	ImageUrl      string                 `protobuf:"bytes,2,opt,name=ImageUrl,proto3" json:"ImageUrl,omitempty"` //TODO 图片URL地址
	LinkUrl       string                 `protobuf:"bytes,3,opt,name=LinkUrl,proto3" json:"LinkUrl,omitempty"`   //TODO 	点击跳转链接
	GoodId        int64                  `protobuf:"varint,4,opt,name=GoodId,proto3" json:"GoodId,omitempty"`    //TODO 关联商品ID
	Sort          int64                  `protobuf:"varint,5,opt,name=Sort,proto3" json:"Sort,omitempty"`        //TODO 排序权重(越大越靠前)
	Active        int64                  `protobuf:"varint,6,opt,name=Active,proto3" json:"Active,omitempty"`    //TODO 是否启
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GoodsCarouselList) Reset() {
	*x = GoodsCarouselList{}
	mi := &file_goods_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoodsCarouselList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsCarouselList) ProtoMessage() {}

func (x *GoodsCarouselList) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsCarouselList.ProtoReflect.Descriptor instead.
func (*GoodsCarouselList) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{26}
}

func (x *GoodsCarouselList) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GoodsCarouselList) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *GoodsCarouselList) GetLinkUrl() string {
	if x != nil {
		return x.LinkUrl
	}
	return ""
}

func (x *GoodsCarouselList) GetGoodId() int64 {
	if x != nil {
		return x.GoodId
	}
	return 0
}

func (x *GoodsCarouselList) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *GoodsCarouselList) GetActive() int64 {
	if x != nil {
		return x.Active
	}
	return 0
}

// 商品分类
type ProductCategoryReq struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                               // 分类名称
	CategoryUrl         string                 `protobuf:"bytes,2,opt,name=CategoryUrl,proto3" json:"CategoryUrl,omitempty"`                 // 分类的图片地址
	CategoryDescription string                 `protobuf:"bytes,3,opt,name=CategoryDescription,proto3" json:"CategoryDescription,omitempty"` // 商品分类描述
	CategoryRecommend   int32                  `protobuf:"varint,4,opt,name=CategoryRecommend,proto3" json:"CategoryRecommend,omitempty"`    // 是否推荐
	ParentId            uint32                 `protobuf:"varint,5,opt,name=ParentId,proto3" json:"ParentId,omitempty"`                      // 父分类ID (0表示一级分类)
	SortOrder           int32                  `protobuf:"varint,6,opt,name=SortOrder,proto3" json:"SortOrder,omitempty"`                    // 排序权重(越大越靠前)
	IsActive            int32                  `protobuf:"varint,7,opt,name=IsActive,proto3" json:"IsActive,omitempty"`                      // 是否启用
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ProductCategoryReq) Reset() {
	*x = ProductCategoryReq{}
	mi := &file_goods_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategoryReq) ProtoMessage() {}

func (x *ProductCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategoryReq.ProtoReflect.Descriptor instead.
func (*ProductCategoryReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{27}
}

func (x *ProductCategoryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductCategoryReq) GetCategoryUrl() string {
	if x != nil {
		return x.CategoryUrl
	}
	return ""
}

func (x *ProductCategoryReq) GetCategoryDescription() string {
	if x != nil {
		return x.CategoryDescription
	}
	return ""
}

func (x *ProductCategoryReq) GetCategoryRecommend() int32 {
	if x != nil {
		return x.CategoryRecommend
	}
	return 0
}

func (x *ProductCategoryReq) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *ProductCategoryReq) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *ProductCategoryReq) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

type ProductCategoryResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Id            uint32                 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"` // 创建的分类ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductCategoryResp) Reset() {
	*x = ProductCategoryResp{}
	mi := &file_goods_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductCategoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategoryResp) ProtoMessage() {}

func (x *ProductCategoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategoryResp.ProtoReflect.Descriptor instead.
func (*ProductCategoryResp) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{28}
}

func (x *ProductCategoryResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ProductCategoryResp) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ProductCategoryListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ParentId      uint32                 `protobuf:"varint,1,opt,name=ParentId,proto3" json:"ParentId,omitempty"` // 可选，获取指定父分类下的子分类
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductCategoryListReq) Reset() {
	*x = ProductCategoryListReq{}
	mi := &file_goods_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductCategoryListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategoryListReq) ProtoMessage() {}

func (x *ProductCategoryListReq) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategoryListReq.ProtoReflect.Descriptor instead.
func (*ProductCategoryListReq) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{29}
}

func (x *ProductCategoryListReq) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

type ProductCategoryListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*ProductCategoryItem `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductCategoryListResp) Reset() {
	*x = ProductCategoryListResp{}
	mi := &file_goods_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductCategoryListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategoryListResp) ProtoMessage() {}

func (x *ProductCategoryListResp) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategoryListResp.ProtoReflect.Descriptor instead.
func (*ProductCategoryListResp) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{30}
}

func (x *ProductCategoryListResp) GetList() []*ProductCategoryItem {
	if x != nil {
		return x.List
	}
	return nil
}

type ProductCategoryItem struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                               // 分类名称
	CategoryUrl         string                 `protobuf:"bytes,2,opt,name=CategoryUrl,proto3" json:"CategoryUrl,omitempty"`                 // 分类的图片地址
	CategoryDescription string                 `protobuf:"bytes,3,opt,name=CategoryDescription,proto3" json:"CategoryDescription,omitempty"` // 商品分类描述
	CategoryRecommend   int32                  `protobuf:"varint,4,opt,name=CategoryRecommend,proto3" json:"CategoryRecommend,omitempty"`    // 是否推荐
	ParentId            uint32                 `protobuf:"varint,5,opt,name=ParentId,proto3" json:"ParentId,omitempty"`                      // 父分类ID (0表示一级分类)
	SortOrder           int32                  `protobuf:"varint,6,opt,name=SortOrder,proto3" json:"SortOrder,omitempty"`                    // 排序权重(越大越靠前)
	IsActive            int32                  `protobuf:"varint,7,opt,name=IsActive,proto3" json:"IsActive,omitempty"`                      // 是否启用
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ProductCategoryItem) Reset() {
	*x = ProductCategoryItem{}
	mi := &file_goods_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductCategoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategoryItem) ProtoMessage() {}

func (x *ProductCategoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategoryItem.ProtoReflect.Descriptor instead.
func (*ProductCategoryItem) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{31}
}

func (x *ProductCategoryItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductCategoryItem) GetCategoryUrl() string {
	if x != nil {
		return x.CategoryUrl
	}
	return ""
}

func (x *ProductCategoryItem) GetCategoryDescription() string {
	if x != nil {
		return x.CategoryDescription
	}
	return ""
}

func (x *ProductCategoryItem) GetCategoryRecommend() int32 {
	if x != nil {
		return x.CategoryRecommend
	}
	return 0
}

func (x *ProductCategoryItem) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *ProductCategoryItem) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *ProductCategoryItem) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

// 商品详情
type GoodsInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GoodsId       int64                  `protobuf:"varint,1,opt,name=goodsId,proto3" json:"goodsId,omitempty"` // 商品编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GoodsInfoRequest) Reset() {
	*x = GoodsInfoRequest{}
	mi := &file_goods_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoodsInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsInfoRequest) ProtoMessage() {}

func (x *GoodsInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsInfoRequest.ProtoReflect.Descriptor instead.
func (*GoodsInfoRequest) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{32}
}

func (x *GoodsInfoRequest) GetGoodsId() int64 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

type GoodsInfoResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	GoodsId        int64                  `protobuf:"varint,1,opt,name=goodsId,proto3" json:"goodsId,omitempty"`                                     // 商品编号
	ImageName      string                 `protobuf:"bytes,2,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`                 // 图片地址
	GoodsName      string                 `protobuf:"bytes,3,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`                 // 商品名称
	CategoryId     int64                  `protobuf:"varint,4,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`             // 商品分类ID
	Price          int64                  `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`                                         // 商品分类ID
	Stock          int32                  `protobuf:"varint,6,opt,name=stock,proto3" json:"stock,omitempty"`                                         // 库存数量
	Status         int32                  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`                                       // 商品状态：0下架/1上架
	Description    string                 `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`                              // 商品描述
	BrandId        int64                  `protobuf:"varint,9,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`                      // 品牌ID
	IsPromotion    int32                  `protobuf:"varint,10,opt,name=is_promotion,json=isPromotion,proto3" json:"is_promotion,omitempty"`         // 是否促销：0否/1是
	ProductionDate string                 `protobuf:"bytes,11,opt,name=production_date,json=productionDate,proto3" json:"production_date,omitempty"` // 生产日期
	PromotionPrice string                 `protobuf:"bytes,12,opt,name=promotion_price,json=promotionPrice,proto3" json:"promotion_price,omitempty"` // 促销价格
	IsSub          int32                  `protobuf:"varint,13,opt,name=is_sub,json=isSub,proto3" json:"is_sub,omitempty"`                           // 是否单独分佣
	ExpiryDate     int32                  `protobuf:"varint,14,opt,name=expiry_date,json=expiryDate,proto3" json:"expiry_date,omitempty"`            // 保质期天数
	SalesVolume    int32                  `protobuf:"varint,15,opt,name=sales_volume,json=salesVolume,proto3" json:"sales_volume,omitempty"`         // 商品销量
	CreatedAt      string                 `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                // 创建时间
	UpdatedAt      string                 `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                // 修改时间
	DeletedAt      string                 `protobuf:"bytes,18,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`                // 删除时间
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GoodsInfoResponse) Reset() {
	*x = GoodsInfoResponse{}
	mi := &file_goods_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoodsInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsInfoResponse) ProtoMessage() {}

func (x *GoodsInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsInfoResponse.ProtoReflect.Descriptor instead.
func (*GoodsInfoResponse) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{33}
}

func (x *GoodsInfoResponse) GetGoodsId() int64 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *GoodsInfoResponse) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *GoodsInfoResponse) GetGoodsName() string {
	if x != nil {
		return x.GoodsName
	}
	return ""
}

func (x *GoodsInfoResponse) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *GoodsInfoResponse) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GoodsInfoResponse) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *GoodsInfoResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GoodsInfoResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoodsInfoResponse) GetBrandId() int64 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *GoodsInfoResponse) GetIsPromotion() int32 {
	if x != nil {
		return x.IsPromotion
	}
	return 0
}

func (x *GoodsInfoResponse) GetProductionDate() string {
	if x != nil {
		return x.ProductionDate
	}
	return ""
}

func (x *GoodsInfoResponse) GetPromotionPrice() string {
	if x != nil {
		return x.PromotionPrice
	}
	return ""
}

func (x *GoodsInfoResponse) GetIsSub() int32 {
	if x != nil {
		return x.IsSub
	}
	return 0
}

func (x *GoodsInfoResponse) GetExpiryDate() int32 {
	if x != nil {
		return x.ExpiryDate
	}
	return 0
}

func (x *GoodsInfoResponse) GetSalesVolume() int32 {
	if x != nil {
		return x.SalesVolume
	}
	return 0
}

func (x *GoodsInfoResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GoodsInfoResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *GoodsInfoResponse) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

// 商品热销榜单
type HotGoodsListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HotGoodsListRequest) Reset() {
	*x = HotGoodsListRequest{}
	mi := &file_goods_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HotGoodsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotGoodsListRequest) ProtoMessage() {}

func (x *HotGoodsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotGoodsListRequest.ProtoReflect.Descriptor instead.
func (*HotGoodsListRequest) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{34}
}

type HotGoodsListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*HotGoodsList        `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HotGoodsListResponse) Reset() {
	*x = HotGoodsListResponse{}
	mi := &file_goods_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HotGoodsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotGoodsListResponse) ProtoMessage() {}

func (x *HotGoodsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotGoodsListResponse.ProtoReflect.Descriptor instead.
func (*HotGoodsListResponse) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{35}
}

func (x *HotGoodsListResponse) GetList() []*HotGoodsList {
	if x != nil {
		return x.List
	}
	return nil
}

type HotGoodsList struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	GoodsId        int64                  `protobuf:"varint,1,opt,name=goodsId,proto3" json:"goodsId,omitempty"`                                     // 商品编号
	ImageName      string                 `protobuf:"bytes,2,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`                 // 图片地址
	GoodsName      string                 `protobuf:"bytes,3,opt,name=goods_name,json=goodsName,proto3" json:"goods_name,omitempty"`                 // 商品名称
	CategoryId     int64                  `protobuf:"varint,4,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`             // 商品分类ID
	Price          int64                  `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`                                         // 商品分类ID
	Stock          int32                  `protobuf:"varint,6,opt,name=stock,proto3" json:"stock,omitempty"`                                         // 库存数量
	Status         int32                  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`                                       // 商品状态：0下架/1上架
	Description    string                 `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`                              // 商品描述
	BrandId        int64                  `protobuf:"varint,9,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`                      // 品牌ID
	IsPromotion    int32                  `protobuf:"varint,10,opt,name=is_promotion,json=isPromotion,proto3" json:"is_promotion,omitempty"`         // 是否促销：0否/1是
	ProductionDate string                 `protobuf:"bytes,11,opt,name=production_date,json=productionDate,proto3" json:"production_date,omitempty"` // 生产日期
	PromotionPrice string                 `protobuf:"bytes,12,opt,name=promotion_price,json=promotionPrice,proto3" json:"promotion_price,omitempty"` // 促销价格
	IsSub          int32                  `protobuf:"varint,13,opt,name=is_sub,json=isSub,proto3" json:"is_sub,omitempty"`                           // 是否单独分佣
	ExpiryDate     int32                  `protobuf:"varint,14,opt,name=expiry_date,json=expiryDate,proto3" json:"expiry_date,omitempty"`            // 保质期天数
	SalesVolume    int32                  `protobuf:"varint,15,opt,name=sales_volume,json=salesVolume,proto3" json:"sales_volume,omitempty"`         // 商品销量
	CreatedAt      string                 `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                // 创建时间
	UpdatedAt      string                 `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                // 修改时间
	DeletedAt      string                 `protobuf:"bytes,18,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`                // 删除时间
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HotGoodsList) Reset() {
	*x = HotGoodsList{}
	mi := &file_goods_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HotGoodsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotGoodsList) ProtoMessage() {}

func (x *HotGoodsList) ProtoReflect() protoreflect.Message {
	mi := &file_goods_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotGoodsList.ProtoReflect.Descriptor instead.
func (*HotGoodsList) Descriptor() ([]byte, []int) {
	return file_goods_proto_rawDescGZIP(), []int{36}
}

func (x *HotGoodsList) GetGoodsId() int64 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *HotGoodsList) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *HotGoodsList) GetGoodsName() string {
	if x != nil {
		return x.GoodsName
	}
	return ""
}

func (x *HotGoodsList) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *HotGoodsList) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *HotGoodsList) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *HotGoodsList) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HotGoodsList) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HotGoodsList) GetBrandId() int64 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *HotGoodsList) GetIsPromotion() int32 {
	if x != nil {
		return x.IsPromotion
	}
	return 0
}

func (x *HotGoodsList) GetProductionDate() string {
	if x != nil {
		return x.ProductionDate
	}
	return ""
}

func (x *HotGoodsList) GetPromotionPrice() string {
	if x != nil {
		return x.PromotionPrice
	}
	return ""
}

func (x *HotGoodsList) GetIsSub() int32 {
	if x != nil {
		return x.IsSub
	}
	return 0
}

func (x *HotGoodsList) GetExpiryDate() int32 {
	if x != nil {
		return x.ExpiryDate
	}
	return 0
}

func (x *HotGoodsList) GetSalesVolume() int32 {
	if x != nil {
		return x.SalesVolume
	}
	return 0
}

func (x *HotGoodsList) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *HotGoodsList) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *HotGoodsList) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

var File_goods_proto protoreflect.FileDescriptor

var file_goods_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x03, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x69,
	0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x61,
	0x69, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4f, 0x6e, 0x53,
	0x61, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x4f, 0x6e, 0x53,
	0x61, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x48, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x48, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x49, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x22, 0x37, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x22, 0xfe, 0x01, 0x0a, 0x0e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x53, 0x6f, 0x72,
	0x74, 0x42, 0x79, 0x52, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x22, 0x50, 0x0a, 0x06, 0x53, 0x6f, 0x72,
	0x74, 0x42, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x53, 0x43, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x57, 0x45, 0x53, 0x54, 0x10, 0x04, 0x22, 0x4f, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x29, 0x0a, 0x15,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x50, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x16, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2d, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x64, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xee, 0x01, 0x0a, 0x12, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x26, 0x0a, 0x12, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x50, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x13, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2a, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xeb, 0x01, 0x0a,
	0x0f, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xed, 0x01, 0x0a, 0x11, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x12, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x22, 0xcf,
	0x02, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x73, 0x4f, 0x6e, 0x53, 0x61, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x49, 0x73, 0x4f, 0x6e, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x48, 0x6f,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x48, 0x6f, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x49, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x22, 0x34, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x22, 0x3c, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x22, 0x3d, 0x0a,
	0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x14,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x57, 0x69,
	0x74, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x15,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x44, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x43, 0x0a,
	0x11, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2e, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x10, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x72, 0x6f,
	0x75, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x69, 0x6e,
	0x6b, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4c, 0x69, 0x6e, 0x6b,
	0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x2d, 0x0a, 0x11, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x43, 0x61, 0x72, 0x6f, 0x75, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43,
	0x61, 0x72, 0x6f, 0x75, 0x73, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x45,
	0x0a, 0x15, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x72, 0x6f, 0x75, 0x73, 0x65, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x43, 0x61, 0x72, 0x6f, 0x75, 0x73, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43,
	0x61, 0x72, 0x6f, 0x75, 0x73, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53,
	0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x12,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x3f,
	0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x64, 0x22,
	0x34, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2e, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x81, 0x02, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x30,
	0x0a, 0x13, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x11, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6f,
	0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53,
	0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x22, 0x2c, 0x0a, 0x10, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x49, 0x64, 0x22, 0xba, 0x04, 0x0a, 0x11, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x73, 0x75,
	0x62, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x73, 0x53, 0x75, 0x62, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x15, 0x0a, 0x13, 0x48, 0x6f, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3f, 0x0a, 0x14, 0x48, 0x6f, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb5, 0x04, 0x0a, 0x0c, 0x48, 0x6f, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x73, 0x75,
	0x62, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x73, 0x53, 0x75, 0x62, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x32,
	0xf6, 0x07, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x72, 0x76, 0x12, 0x47, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x51, 0x0a, 0x12, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x69, 0x64, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0f, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a,
	0x0e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x64, 0x12,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x09, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x48,
	0x6f, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x48, 0x6f, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x72,
	0x6f, 0x75, 0x73, 0x65, 0x6c, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x43, 0x61, 0x72, 0x6f, 0x75, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x72, 0x6f,
	0x75, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x11, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x43, 0x61, 0x72, 0x6f, 0x75, 0x73, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x72, 0x6f, 0x75,
	0x73, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x72, 0x6f, 0x75, 0x73, 0x65, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_goods_proto_rawDescOnce sync.Once
	file_goods_proto_rawDescData = file_goods_proto_rawDesc
)

func file_goods_proto_rawDescGZIP() []byte {
	file_goods_proto_rawDescOnce.Do(func() {
		file_goods_proto_rawDescData = protoimpl.X.CompressGZIP(file_goods_proto_rawDescData)
	})
	return file_goods_proto_rawDescData
}

var file_goods_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_goods_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_goods_proto_goTypes = []any{
	(ProductListReq_SortBy)(0),      // 0: proto.ProductListReq.SortBy
	(*ProductReq)(nil),              // 1: proto.ProductReq
	(*ProductResp)(nil),             // 2: proto.ProductResp
	(*ProductListReq)(nil),          // 3: proto.ProductListReq
	(*ProductListResp)(nil),         // 4: proto.ProductListResp
	(*GoodsBrandsListPidReq)(nil),   // 5: proto.GoodsBrandsListPidReq
	(*GoodsBrandsListPidResp)(nil),  // 6: proto.GoodsBrandsListPidResp
	(*GoodsBrandsListPid)(nil),      // 7: proto.GoodsBrandsListPid
	(*GoodsBrandsListReq)(nil),      // 8: proto.GoodsBrandsListReq
	(*GoodsBrandsListResp)(nil),     // 9: proto.GoodsBrandsListResp
	(*GoodsBrandsList)(nil),         // 10: proto.GoodsBrandsList
	(*GoodsBrandsAddReq)(nil),       // 11: proto.GoodsBrandsAddReq
	(*GoodsBrandsAddResp)(nil),      // 12: proto.GoodsBrandsAddResp
	(*ProductItem)(nil),             // 13: proto.ProductItem
	(*ProductImage)(nil),            // 14: proto.ProductImage
	(*ProductAttribute)(nil),        // 15: proto.ProductAttribute
	(*ProductColumnReq)(nil),        // 16: proto.ProductColumnReq
	(*ProductColumnResp)(nil),       // 17: proto.ProductColumnResp
	(*ProductColumnListReq)(nil),    // 18: proto.ProductColumnListReq
	(*ProductColumnListResp)(nil),   // 19: proto.ProductColumnListResp
	(*ProductColumnItem)(nil),       // 20: proto.ProductColumnItem
	(*ColumnProductReq)(nil),        // 21: proto.ColumnProductReq
	(*ColumnProductResp)(nil),       // 22: proto.ColumnProductResp
	(*GoodsCarouselReq)(nil),        // 23: proto.GoodsCarouselReq
	(*GoodsCarouselResp)(nil),       // 24: proto.GoodsCarouselResp
	(*GoodsCarouselListReq)(nil),    // 25: proto.GoodsCarouselListReq
	(*GoodsCarouselListResp)(nil),   // 26: proto.GoodsCarouselListResp
	(*GoodsCarouselList)(nil),       // 27: proto.GoodsCarouselList
	(*ProductCategoryReq)(nil),      // 28: proto.ProductCategoryReq
	(*ProductCategoryResp)(nil),     // 29: proto.ProductCategoryResp
	(*ProductCategoryListReq)(nil),  // 30: proto.ProductCategoryListReq
	(*ProductCategoryListResp)(nil), // 31: proto.ProductCategoryListResp
	(*ProductCategoryItem)(nil),     // 32: proto.ProductCategoryItem
	(*GoodsInfoRequest)(nil),        // 33: proto.GoodsInfoRequest
	(*GoodsInfoResponse)(nil),       // 34: proto.GoodsInfoResponse
	(*HotGoodsListRequest)(nil),     // 35: proto.HotGoodsListRequest
	(*HotGoodsListResponse)(nil),    // 36: proto.HotGoodsListResponse
	(*HotGoodsList)(nil),            // 37: proto.HotGoodsList
}
var file_goods_proto_depIdxs = []int32{
	14, // 0: proto.ProductReq.Images:type_name -> proto.ProductImage
	15, // 1: proto.ProductReq.Attributes:type_name -> proto.ProductAttribute
	0,  // 2: proto.ProductListReq.Sort:type_name -> proto.ProductListReq.SortBy
	13, // 3: proto.ProductListResp.List:type_name -> proto.ProductItem
	7,  // 4: proto.GoodsBrandsListPidResp.List:type_name -> proto.GoodsBrandsListPid
	10, // 5: proto.GoodsBrandsListResp.List:type_name -> proto.GoodsBrandsList
	20, // 6: proto.ProductColumnListResp.List:type_name -> proto.ProductColumnItem
	32, // 7: proto.ProductColumnItem.Categories:type_name -> proto.ProductCategoryItem
	13, // 8: proto.ColumnProductResp.Products:type_name -> proto.ProductItem
	27, // 9: proto.GoodsCarouselListResp.list:type_name -> proto.GoodsCarouselList
	32, // 10: proto.ProductCategoryListResp.List:type_name -> proto.ProductCategoryItem
	37, // 11: proto.HotGoodsListResponse.list:type_name -> proto.HotGoodsList
	28, // 12: proto.GoodsSrv.CreateCategory:input_type -> proto.ProductCategoryReq
	30, // 13: proto.GoodsSrv.GetCategoryList:input_type -> proto.ProductCategoryListReq
	1,  // 14: proto.GoodsSrv.CreateProduct:input_type -> proto.ProductReq
	3,  // 15: proto.GoodsSrv.GetProductList:input_type -> proto.ProductListReq
	5,  // 16: proto.GoodsSrv.GoodsBrandsListPid:input_type -> proto.GoodsBrandsListPidReq
	8,  // 17: proto.GoodsSrv.GoodsBrandsList:input_type -> proto.GoodsBrandsListReq
	11, // 18: proto.GoodsSrv.GoodsBrandsAdd:input_type -> proto.GoodsBrandsAddReq
	16, // 19: proto.GoodsSrv.CreateColumn:input_type -> proto.ProductColumnReq
	18, // 20: proto.GoodsSrv.GetColumnList:input_type -> proto.ProductColumnListReq
	21, // 21: proto.GoodsSrv.GetColumnProducts:input_type -> proto.ColumnProductReq
	33, // 22: proto.GoodsSrv.GoodsInfo:input_type -> proto.GoodsInfoRequest
	35, // 23: proto.GoodsSrv.HotGoodsList:input_type -> proto.HotGoodsListRequest
	23, // 24: proto.GoodsSrv.GoodsCarousel:input_type -> proto.GoodsCarouselReq
	25, // 25: proto.GoodsSrv.GoodsCarouselList:input_type -> proto.GoodsCarouselListReq
	29, // 26: proto.GoodsSrv.CreateCategory:output_type -> proto.ProductCategoryResp
	31, // 27: proto.GoodsSrv.GetCategoryList:output_type -> proto.ProductCategoryListResp
	2,  // 28: proto.GoodsSrv.CreateProduct:output_type -> proto.ProductResp
	4,  // 29: proto.GoodsSrv.GetProductList:output_type -> proto.ProductListResp
	6,  // 30: proto.GoodsSrv.GoodsBrandsListPid:output_type -> proto.GoodsBrandsListPidResp
	9,  // 31: proto.GoodsSrv.GoodsBrandsList:output_type -> proto.GoodsBrandsListResp
	12, // 32: proto.GoodsSrv.GoodsBrandsAdd:output_type -> proto.GoodsBrandsAddResp
	17, // 33: proto.GoodsSrv.CreateColumn:output_type -> proto.ProductColumnResp
	19, // 34: proto.GoodsSrv.GetColumnList:output_type -> proto.ProductColumnListResp
	22, // 35: proto.GoodsSrv.GetColumnProducts:output_type -> proto.ColumnProductResp
	34, // 36: proto.GoodsSrv.GoodsInfo:output_type -> proto.GoodsInfoResponse
	36, // 37: proto.GoodsSrv.HotGoodsList:output_type -> proto.HotGoodsListResponse
	24, // 38: proto.GoodsSrv.GoodsCarousel:output_type -> proto.GoodsCarouselResp
	26, // 39: proto.GoodsSrv.GoodsCarouselList:output_type -> proto.GoodsCarouselListResp
	26, // [26:40] is the sub-list for method output_type
	12, // [12:26] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_goods_proto_init() }
func file_goods_proto_init() {
	if File_goods_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goods_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_goods_proto_goTypes,
		DependencyIndexes: file_goods_proto_depIdxs,
		EnumInfos:         file_goods_proto_enumTypes,
		MessageInfos:      file_goods_proto_msgTypes,
	}.Build()
	File_goods_proto = out.File
	file_goods_proto_rawDesc = nil
	file_goods_proto_goTypes = nil
	file_goods_proto_depIdxs = nil
}
