// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: goods.proto

package goods

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GoodsSrv_AddGoods_FullMethodName        = "/goods.GoodsSrv/AddGoods"
	GoodsSrv_GoodsList_FullMethodName       = "/goods.GoodsSrv/GoodsList"
	GoodsSrv_AddSecKillGoods_FullMethodName = "/goods.GoodsSrv/AddSecKillGoods"
	GoodsSrv_AddGoodsTypes_FullMethodName   = "/goods.GoodsSrv/AddGoodsTypes"
	GoodsSrv_SyncGoodsToEs_FullMethodName   = "/goods.GoodsSrv/SyncGoodsToEs"
	GoodsSrv_GoodsEsSearch_FullMethodName   = "/goods.GoodsSrv/GoodsEsSearch"
)

// GoodsSrvClient is the client API for GoodsSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsSrvClient interface {
	AddGoods(ctx context.Context, in *AddGoodsRequest, opts ...grpc.CallOption) (*AddGoodsResponse, error)
	GoodsList(ctx context.Context, in *GoodsListRequest, opts ...grpc.CallOption) (*GoodsListResponse, error)
	// 添加秒杀商品
	AddSecKillGoods(ctx context.Context, in *AddSecKillGoodsRequest, opts ...grpc.CallOption) (*AddSecKillGoodsResponse, error)
	// 添加商品分类
	AddGoodsTypes(ctx context.Context, in *AddGoodsTypesRequest, opts ...grpc.CallOption) (*AddGoodsTypesResponse, error)
	// 同步商品到es
	SyncGoodsToEs(ctx context.Context, in *SyncGoodsToEsRequest, opts ...grpc.CallOption) (*SyncGoodsToEsResponse, error)
	// 商品es搜索
	GoodsEsSearch(ctx context.Context, in *GoodsEsSearchRequest, opts ...grpc.CallOption) (*GoodsEsSearchResponse, error)
}

type goodsSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsSrvClient(cc grpc.ClientConnInterface) GoodsSrvClient {
	return &goodsSrvClient{cc}
}

func (c *goodsSrvClient) AddGoods(ctx context.Context, in *AddGoodsRequest, opts ...grpc.CallOption) (*AddGoodsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddGoodsResponse)
	err := c.cc.Invoke(ctx, GoodsSrv_AddGoods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsSrvClient) GoodsList(ctx context.Context, in *GoodsListRequest, opts ...grpc.CallOption) (*GoodsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsListResponse)
	err := c.cc.Invoke(ctx, GoodsSrv_GoodsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsSrvClient) AddSecKillGoods(ctx context.Context, in *AddSecKillGoodsRequest, opts ...grpc.CallOption) (*AddSecKillGoodsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSecKillGoodsResponse)
	err := c.cc.Invoke(ctx, GoodsSrv_AddSecKillGoods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsSrvClient) AddGoodsTypes(ctx context.Context, in *AddGoodsTypesRequest, opts ...grpc.CallOption) (*AddGoodsTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddGoodsTypesResponse)
	err := c.cc.Invoke(ctx, GoodsSrv_AddGoodsTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsSrvClient) SyncGoodsToEs(ctx context.Context, in *SyncGoodsToEsRequest, opts ...grpc.CallOption) (*SyncGoodsToEsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncGoodsToEsResponse)
	err := c.cc.Invoke(ctx, GoodsSrv_SyncGoodsToEs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsSrvClient) GoodsEsSearch(ctx context.Context, in *GoodsEsSearchRequest, opts ...grpc.CallOption) (*GoodsEsSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsEsSearchResponse)
	err := c.cc.Invoke(ctx, GoodsSrv_GoodsEsSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsSrvServer is the server API for GoodsSrv service.
// All implementations must embed UnimplementedGoodsSrvServer
// for forward compatibility
type GoodsSrvServer interface {
	AddGoods(context.Context, *AddGoodsRequest) (*AddGoodsResponse, error)
	GoodsList(context.Context, *GoodsListRequest) (*GoodsListResponse, error)
	// 添加秒杀商品
	AddSecKillGoods(context.Context, *AddSecKillGoodsRequest) (*AddSecKillGoodsResponse, error)
	// 添加商品分类
	AddGoodsTypes(context.Context, *AddGoodsTypesRequest) (*AddGoodsTypesResponse, error)
	// 同步商品到es
	SyncGoodsToEs(context.Context, *SyncGoodsToEsRequest) (*SyncGoodsToEsResponse, error)
	// 商品es搜索
	GoodsEsSearch(context.Context, *GoodsEsSearchRequest) (*GoodsEsSearchResponse, error)
	mustEmbedUnimplementedGoodsSrvServer()
}

// UnimplementedGoodsSrvServer must be embedded to have forward compatible implementations.
type UnimplementedGoodsSrvServer struct {
}

func (UnimplementedGoodsSrvServer) AddGoods(context.Context, *AddGoodsRequest) (*AddGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGoods not implemented")
}
func (UnimplementedGoodsSrvServer) GoodsList(context.Context, *GoodsListRequest) (*GoodsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodsList not implemented")
}
func (UnimplementedGoodsSrvServer) AddSecKillGoods(context.Context, *AddSecKillGoodsRequest) (*AddSecKillGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSecKillGoods not implemented")
}
func (UnimplementedGoodsSrvServer) AddGoodsTypes(context.Context, *AddGoodsTypesRequest) (*AddGoodsTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGoodsTypes not implemented")
}
func (UnimplementedGoodsSrvServer) SyncGoodsToEs(context.Context, *SyncGoodsToEsRequest) (*SyncGoodsToEsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncGoodsToEs not implemented")
}
func (UnimplementedGoodsSrvServer) GoodsEsSearch(context.Context, *GoodsEsSearchRequest) (*GoodsEsSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodsEsSearch not implemented")
}
func (UnimplementedGoodsSrvServer) mustEmbedUnimplementedGoodsSrvServer() {}

// UnsafeGoodsSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsSrvServer will
// result in compilation errors.
type UnsafeGoodsSrvServer interface {
	mustEmbedUnimplementedGoodsSrvServer()
}

func RegisterGoodsSrvServer(s grpc.ServiceRegistrar, srv GoodsSrvServer) {
	s.RegisterService(&GoodsSrv_ServiceDesc, srv)
}

func _GoodsSrv_AddGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsSrvServer).AddGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsSrv_AddGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsSrvServer).AddGoods(ctx, req.(*AddGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsSrv_GoodsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsSrvServer).GoodsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsSrv_GoodsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsSrvServer).GoodsList(ctx, req.(*GoodsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsSrv_AddSecKillGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSecKillGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsSrvServer).AddSecKillGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsSrv_AddSecKillGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsSrvServer).AddSecKillGoods(ctx, req.(*AddSecKillGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsSrv_AddGoodsTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGoodsTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsSrvServer).AddGoodsTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsSrv_AddGoodsTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsSrvServer).AddGoodsTypes(ctx, req.(*AddGoodsTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsSrv_SyncGoodsToEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncGoodsToEsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsSrvServer).SyncGoodsToEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsSrv_SyncGoodsToEs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsSrvServer).SyncGoodsToEs(ctx, req.(*SyncGoodsToEsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsSrv_GoodsEsSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsEsSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsSrvServer).GoodsEsSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsSrv_GoodsEsSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsSrvServer).GoodsEsSearch(ctx, req.(*GoodsEsSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoodsSrv_ServiceDesc is the grpc.ServiceDesc for GoodsSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoodsSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goods.GoodsSrv",
	HandlerType: (*GoodsSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGoods",
			Handler:    _GoodsSrv_AddGoods_Handler,
		},
		{
			MethodName: "GoodsList",
			Handler:    _GoodsSrv_GoodsList_Handler,
		},
		{
			MethodName: "AddSecKillGoods",
			Handler:    _GoodsSrv_AddSecKillGoods_Handler,
		},
		{
			MethodName: "AddGoodsTypes",
			Handler:    _GoodsSrv_AddGoodsTypes_Handler,
		},
		{
			MethodName: "SyncGoodsToEs",
			Handler:    _GoodsSrv_SyncGoodsToEs_Handler,
		},
		{
			MethodName: "GoodsEsSearch",
			Handler:    _GoodsSrv_GoodsEsSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goods.proto",
}
