// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: goods.proto

package goods

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GoodsSrv_CreateCategory_FullMethodName    = "/proto.GoodsSrv/CreateCategory"
	GoodsSrv_GetCategoryList_FullMethodName   = "/proto.GoodsSrv/GetCategoryList"
	GoodsSrv_CreateProduct_FullMethodName     = "/proto.GoodsSrv/CreateProduct"
	GoodsSrv_GetProductList_FullMethodName    = "/proto.GoodsSrv/GetProductList"
	GoodsSrv_CreateColumn_FullMethodName      = "/proto.GoodsSrv/CreateColumn"
	GoodsSrv_GetColumnList_FullMethodName     = "/proto.GoodsSrv/GetColumnList"
	GoodsSrv_GetColumnProducts_FullMethodName = "/proto.GoodsSrv/GetColumnProducts"
	GoodsSrv_GoodsInfo_FullMethodName         = "/proto.GoodsSrv/GoodsInfo"
	GoodsSrv_HotGoodsList_FullMethodName      = "/proto.GoodsSrv/HotGoodsList"
	GoodsSrv_GoodsCarousel_FullMethodName     = "/proto.GoodsSrv/GoodsCarousel"
	GoodsSrv_GoodsCarouselList_FullMethodName = "/proto.GoodsSrv/GoodsCarouselList"
)

// GoodsSrvClient is the client API for GoodsSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsSrvClient interface {
	// 分类管理
	CreateCategory(ctx context.Context, in *ProductCategoryReq, opts ...grpc.CallOption) (*ProductCategoryResp, error)
	GetCategoryList(ctx context.Context, in *ProductCategoryListReq, opts ...grpc.CallOption) (*ProductCategoryListResp, error)
	// 商品管理
	CreateProduct(ctx context.Context, in *ProductReq, opts ...grpc.CallOption) (*ProductResp, error)
	GetProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListResp, error)
	// 栏目管理
	CreateColumn(ctx context.Context, in *ProductColumnReq, opts ...grpc.CallOption) (*ProductColumnResp, error)
	GetColumnList(ctx context.Context, in *ProductColumnListReq, opts ...grpc.CallOption) (*ProductColumnListResp, error)
	GetColumnProducts(ctx context.Context, in *ColumnProductReq, opts ...grpc.CallOption) (*ColumnProductResp, error)
	// 商品详情
	GoodsInfo(ctx context.Context, in *GoodsInfoRequest, opts ...grpc.CallOption) (*GoodsInfoResponse, error)
	HotGoodsList(ctx context.Context, in *HotGoodsListRequest, opts ...grpc.CallOption) (*HotGoodsListResponse, error)
	// 轮播图
	GoodsCarousel(ctx context.Context, in *GoodsCarouselReq, opts ...grpc.CallOption) (*GoodsCarouselResp, error)
	GoodsCarouselList(ctx context.Context, in *GoodsCarouselListReq, opts ...grpc.CallOption) (*GoodsCarouselListResp, error)
}

type goodsSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsSrvClient(cc grpc.ClientConnInterface) GoodsSrvClient {
	return &goodsSrvClient{cc}
}

func (c *goodsSrvClient) CreateCategory(ctx context.Context, in *ProductCategoryReq, opts ...grpc.CallOption) (*ProductCategoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductCategoryResp)
	err := c.cc.Invoke(ctx, GoodsSrv_CreateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsSrvClient) GetCategoryList(ctx context.Context, in *ProductCategoryListReq, opts ...grpc.CallOption) (*ProductCategoryListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductCategoryListResp)
	err := c.cc.Invoke(ctx, GoodsSrv_GetCategoryList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsSrvClient) CreateProduct(ctx context.Context, in *ProductReq, opts ...grpc.CallOption) (*ProductResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResp)
	err := c.cc.Invoke(ctx, GoodsSrv_CreateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsSrvClient) GetProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductListResp)
	err := c.cc.Invoke(ctx, GoodsSrv_GetProductList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsSrvClient) CreateColumn(ctx context.Context, in *ProductColumnReq, opts ...grpc.CallOption) (*ProductColumnResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductColumnResp)
	err := c.cc.Invoke(ctx, GoodsSrv_CreateColumn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsSrvClient) GetColumnList(ctx context.Context, in *ProductColumnListReq, opts ...grpc.CallOption) (*ProductColumnListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductColumnListResp)
	err := c.cc.Invoke(ctx, GoodsSrv_GetColumnList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsSrvClient) GetColumnProducts(ctx context.Context, in *ColumnProductReq, opts ...grpc.CallOption) (*ColumnProductResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ColumnProductResp)
	err := c.cc.Invoke(ctx, GoodsSrv_GetColumnProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsSrvClient) GoodsInfo(ctx context.Context, in *GoodsInfoRequest, opts ...grpc.CallOption) (*GoodsInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsInfoResponse)
	err := c.cc.Invoke(ctx, GoodsSrv_GoodsInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsSrvClient) HotGoodsList(ctx context.Context, in *HotGoodsListRequest, opts ...grpc.CallOption) (*HotGoodsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HotGoodsListResponse)
	err := c.cc.Invoke(ctx, GoodsSrv_HotGoodsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsSrvClient) GoodsCarousel(ctx context.Context, in *GoodsCarouselReq, opts ...grpc.CallOption) (*GoodsCarouselResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsCarouselResp)
	err := c.cc.Invoke(ctx, GoodsSrv_GoodsCarousel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsSrvClient) GoodsCarouselList(ctx context.Context, in *GoodsCarouselListReq, opts ...grpc.CallOption) (*GoodsCarouselListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoodsCarouselListResp)
	err := c.cc.Invoke(ctx, GoodsSrv_GoodsCarouselList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsSrvServer is the server API for GoodsSrv service.
// All implementations must embed UnimplementedGoodsSrvServer
// for forward compatibility
type GoodsSrvServer interface {
	// 分类管理
	CreateCategory(context.Context, *ProductCategoryReq) (*ProductCategoryResp, error)
	GetCategoryList(context.Context, *ProductCategoryListReq) (*ProductCategoryListResp, error)
	// 商品管理
	CreateProduct(context.Context, *ProductReq) (*ProductResp, error)
	GetProductList(context.Context, *ProductListReq) (*ProductListResp, error)
	// 栏目管理
	CreateColumn(context.Context, *ProductColumnReq) (*ProductColumnResp, error)
	GetColumnList(context.Context, *ProductColumnListReq) (*ProductColumnListResp, error)
	GetColumnProducts(context.Context, *ColumnProductReq) (*ColumnProductResp, error)
	// 商品详情
	GoodsInfo(context.Context, *GoodsInfoRequest) (*GoodsInfoResponse, error)
	HotGoodsList(context.Context, *HotGoodsListRequest) (*HotGoodsListResponse, error)
	// 轮播图
	GoodsCarousel(context.Context, *GoodsCarouselReq) (*GoodsCarouselResp, error)
	GoodsCarouselList(context.Context, *GoodsCarouselListReq) (*GoodsCarouselListResp, error)
	mustEmbedUnimplementedGoodsSrvServer()
}

// UnimplementedGoodsSrvServer must be embedded to have forward compatible implementations.
type UnimplementedGoodsSrvServer struct {
}

func (UnimplementedGoodsSrvServer) CreateCategory(context.Context, *ProductCategoryReq) (*ProductCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedGoodsSrvServer) GetCategoryList(context.Context, *ProductCategoryListReq) (*ProductCategoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryList not implemented")
}
func (UnimplementedGoodsSrvServer) CreateProduct(context.Context, *ProductReq) (*ProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedGoodsSrvServer) GetProductList(context.Context, *ProductListReq) (*ProductListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductList not implemented")
}
func (UnimplementedGoodsSrvServer) CreateColumn(context.Context, *ProductColumnReq) (*ProductColumnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateColumn not implemented")
}
func (UnimplementedGoodsSrvServer) GetColumnList(context.Context, *ProductColumnListReq) (*ProductColumnListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColumnList not implemented")
}
func (UnimplementedGoodsSrvServer) GetColumnProducts(context.Context, *ColumnProductReq) (*ColumnProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColumnProducts not implemented")
}
func (UnimplementedGoodsSrvServer) GoodsInfo(context.Context, *GoodsInfoRequest) (*GoodsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodsInfo not implemented")
}
func (UnimplementedGoodsSrvServer) HotGoodsList(context.Context, *HotGoodsListRequest) (*HotGoodsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HotGoodsList not implemented")
}
func (UnimplementedGoodsSrvServer) GoodsCarousel(context.Context, *GoodsCarouselReq) (*GoodsCarouselResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodsCarousel not implemented")
}
func (UnimplementedGoodsSrvServer) GoodsCarouselList(context.Context, *GoodsCarouselListReq) (*GoodsCarouselListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodsCarouselList not implemented")
}
func (UnimplementedGoodsSrvServer) mustEmbedUnimplementedGoodsSrvServer() {}

// UnsafeGoodsSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsSrvServer will
// result in compilation errors.
type UnsafeGoodsSrvServer interface {
	mustEmbedUnimplementedGoodsSrvServer()
}

func RegisterGoodsSrvServer(s grpc.ServiceRegistrar, srv GoodsSrvServer) {
	s.RegisterService(&GoodsSrv_ServiceDesc, srv)
}

func _GoodsSrv_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsSrvServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsSrv_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsSrvServer).CreateCategory(ctx, req.(*ProductCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsSrv_GetCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsSrvServer).GetCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsSrv_GetCategoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsSrvServer).GetCategoryList(ctx, req.(*ProductCategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsSrv_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsSrvServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsSrv_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsSrvServer).CreateProduct(ctx, req.(*ProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsSrv_GetProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsSrvServer).GetProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsSrv_GetProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsSrvServer).GetProductList(ctx, req.(*ProductListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsSrv_CreateColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductColumnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsSrvServer).CreateColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsSrv_CreateColumn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsSrvServer).CreateColumn(ctx, req.(*ProductColumnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsSrv_GetColumnList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductColumnListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsSrvServer).GetColumnList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsSrv_GetColumnList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsSrvServer).GetColumnList(ctx, req.(*ProductColumnListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsSrv_GetColumnProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsSrvServer).GetColumnProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsSrv_GetColumnProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsSrvServer).GetColumnProducts(ctx, req.(*ColumnProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsSrv_GoodsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsSrvServer).GoodsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsSrv_GoodsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsSrvServer).GoodsInfo(ctx, req.(*GoodsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsSrv_HotGoodsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotGoodsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsSrvServer).HotGoodsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsSrv_HotGoodsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsSrvServer).HotGoodsList(ctx, req.(*HotGoodsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsSrv_GoodsCarousel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsCarouselReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsSrvServer).GoodsCarousel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsSrv_GoodsCarousel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsSrvServer).GoodsCarousel(ctx, req.(*GoodsCarouselReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsSrv_GoodsCarouselList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsCarouselListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsSrvServer).GoodsCarouselList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsSrv_GoodsCarouselList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsSrvServer).GoodsCarouselList(ctx, req.(*GoodsCarouselListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoodsSrv_ServiceDesc is the grpc.ServiceDesc for GoodsSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoodsSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GoodsSrv",
	HandlerType: (*GoodsSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCategory",
			Handler:    _GoodsSrv_CreateCategory_Handler,
		},
		{
			MethodName: "GetCategoryList",
			Handler:    _GoodsSrv_GetCategoryList_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _GoodsSrv_CreateProduct_Handler,
		},
		{
			MethodName: "GetProductList",
			Handler:    _GoodsSrv_GetProductList_Handler,
		},
		{
			MethodName: "CreateColumn",
			Handler:    _GoodsSrv_CreateColumn_Handler,
		},
		{
			MethodName: "GetColumnList",
			Handler:    _GoodsSrv_GetColumnList_Handler,
		},
		{
			MethodName: "GetColumnProducts",
			Handler:    _GoodsSrv_GetColumnProducts_Handler,
		},
		{
			MethodName: "GoodsInfo",
			Handler:    _GoodsSrv_GoodsInfo_Handler,
		},
		{
			MethodName: "HotGoodsList",
			Handler:    _GoodsSrv_HotGoodsList_Handler,
		},
		{
			MethodName: "GoodsCarousel",
			Handler:    _GoodsSrv_GoodsCarousel_Handler,
		},
		{
			MethodName: "GoodsCarouselList",
			Handler:    _GoodsSrv_GoodsCarouselList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goods.proto",
}
